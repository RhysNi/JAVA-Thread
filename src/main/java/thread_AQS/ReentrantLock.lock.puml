@startuml
'https://plantuml.com/sequence-diagram


autonumber
participant Coder
participant ReentrantLock
participant NonfairSync
participant FairSync
participant Sync
participant AbstractQueuedSynchronizer
participant AbstractOwnableSynchronizer
Coder ->> ReentrantLock: new ReentrantLock(boolean fair)
alt fair = false
    note left of ReentrantLock: new NonfairSync()【非公平锁】
    Coder ->> ReentrantLock:lock()
    ReentrantLock ->> NonfairSync: sync.lock()
    NonfairSync->>AbstractQueuedSynchronizer:CAS(state+1)
    alt CAS==true 锁未被任何线程持有
        AbstractQueuedSynchronizer->>AbstractOwnableSynchronizer:setExclusiveOwnerThread【将当前线程设置独占这把锁】
    else CAS==false 锁已被某个线程持有
        NonfairSync->>AbstractQueuedSynchronizer:acquire(1)
        AbstractQueuedSynchronizer ->> NonfairSync: tryAcquire
        NonfairSync->>Sync:nonfairTryAcquire【尝试获取非公平锁】
        Sync->>AbstractQueuedSynchronizer:getState
        AbstractQueuedSynchronizer-->>Sync:return state
        alt state==0
                Sync->>AbstractQueuedSynchronizer:CAS(state+1)
            alt CAS:true
                AbstractQueuedSynchronizer->>AbstractOwnableSynchronizer:setExclusiveOwnerThread【将当前线程设置独占这把锁】
                Sync-->>NonfairSync:获取锁成功
            end
        else alt 独占线程是当前线程 此流程中不会再设置独占锁，而是只对state做累加，这就是ReentrantLock的重入属性所在
            Sync->>Sync:newState = state+acquires
            alt newState < 0
                note left of Sync:throw new Error("Maximum lock count exceeded")
            else
                Sync->>AbstractQueuedSynchronizer:setState
                Sync-->>NonfairSync:获取锁成功
            end
        else
            Sync-->>NonfairSync:获取锁失败
        end
    end
else fair = true
autonumber
note left of ReentrantLock: new FairSync()【公平锁】
    Coder ->> ReentrantLock:lock()
    ReentrantLock ->> FairSync: sync.lock()
    FairSync->>AbstractQueuedSynchronizer:acquire【获取锁】
    AbstractQueuedSynchronizer->>FairSync:tryAcquire
    FairSync->>AbstractQueuedSynchronizer:state = getState
    alt state==0
        FairSync->>AbstractQueuedSynchronizer:hasQueuedPredecessors【查看等待队列是否有排队的线程】
        AbstractQueuedSynchronizer-->>FairSync:false 【等待队列为空】
        FairSync->>AbstractQueuedSynchronizer:CAS (state+1)
        AbstractQueuedSynchronizer-->>FairSync:true
        FairSync->>AbstractOwnableSynchronizer:【让当前线程独占这把锁】
        FairSync-->>AbstractQueuedSynchronizer:【获得锁成功】
    else alt 持有锁的线程为当前线程
        FairSync->>FairSync:newState = state + acquires
        alt newState < 0
            note left of FairSync:throw new Error("Maximum lock count exceeded")
        end
        FairSync->>AbstractQueuedSynchronizer:setState
        FairSync-->>AbstractQueuedSynchronizer:获取锁成功
    else
        FairSync->>AbstractQueuedSynchronizer:获取锁失败
        AbstractQueuedSynchronizer->>AbstractQueuedSynchronizer:addWaiter【将当线程作为排他形式添加到AQS队列中等待】
        AbstractQueuedSynchronizer-->>AbstractQueuedSynchronizer:node
        AbstractQueuedSynchronizer->>AbstractQueuedSynchronizer:acquireQueued【获取排队状态】
        alt 如果当前线程节点在AQS队列中的前一个节点是Head则再次尝试获取锁
            alt 等待队列为空
                FairSync->>AbstractQueuedSynchronizer:CAS (state+1)
                AbstractQueuedSynchronizer-->>FairSync:true
                FairSync->>AbstractOwnableSynchronizer:【让当前线程独占这把锁】
                FairSync-->>AbstractQueuedSynchronizer:【获得锁成功】
            end
            AbstractQueuedSynchronizer-->>AbstractQueuedSynchronizer:队列节点指针调整
            AbstractQueuedSynchronizer-->>AbstractQueuedSynchronizer:selfInterrupt【给当前线程设置标志位】
        end
    end
end
@enduml